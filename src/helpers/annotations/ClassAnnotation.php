<?php
namespace apiman\helpers\annotations;

use apiman\helpers\ArrayHelper;

/**
 * @inheritdoc
 * @package apiman\helpers\annotations
 */
class ClassAnnotation extends BaseAnnotation
{
    /**
     * список названий класса
     * @var array
     */
    public $classNames;
    /**
     * имя класса, используемое для генерации имени класса в документации
     * @var string
     */
    protected $classNameDoc;
    /**
     * список экспандов
     * @var null
     */
    protected $expands;
    /**
     * маршрут
     * @var string
     */
    public $route;
    /**
     * Флаг того, является ли этот класс автометически сгенерированным для одного из полей, описанных в fields()
     * @var bool
     */
    protected $isAutoGeneratedClass = false;
    /**
     * Список аннотаций для полей и экспандов
     * @var BaseAnnotation[]
     */
    protected $fields = [];

    /**
     * @var string
     */
    protected $template = '
/**
 * @SWG\Definition(type="object", @SWG\Xml(name="{classNameDoc}"))
 */    
class {classNameDoc} 
{
{fields}
}
';

    public function __construct(array $classNames, $classNameDoc, $fields, $route, $expands = null)
    {
        $this->classNames = $classNames;
        $this->classNameDoc = $classNameDoc;
        $this->fields = $fields;
        $this->route = $route;
        $this->expands = $expands;
    }

    /**
     * @inheritdoc
     */
    public function getTemplateData(): array
    {
        $params = get_object_vars($this);
        $params['fields'] = implode("\n", $params['fields']);
        return ArrayHelper::wrapKeys($params);
    }

    /**
     * геттер, возвращающий маршрут
     * @return string
     */
    public function getRoute()
    {
        return $this->route;
    }

    /**
     * геттер, возвращающий список экспандов
     * @return array
     */
    public function getExpands()
    {
        return $this->expands;
    }

    /**
     * геттер, возвращающий название класса для документации
     * @return string
     */
    public function getClassNameDoc()
    {
        return $this->classNameDoc;
    }

    /**
     * добавляет аннотацию к списку сгенерированных
     * @param BaseAnnotation $field
     * @return bool
     */
    public function addField(BaseAnnotation $field): bool
    {
        foreach ($this->fields as $prop) {
            if ($prop->getName() == $field->getName()) {
                return false;
            }
        }
        $this->fields[] = $field;
        return true;
    }

    /**
     * сеттер
     * @param bool $value
     */
    public function setIsAutoGeneratedClass(bool $value)
    {
        $this->isAutoGeneratedClass = $value;
    }

    /**
     * сеттер
     * @return bool
     */
    public function getIsAutoGeneratedClass(): bool
    {
        return $this->isAutoGeneratedClass;
    }
}
